// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerServicesClient is the client API for BrokerServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServicesClient interface {
	AddCity(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error)
	UpdateName(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error)
	UpdateNumber(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error)
	DeleteCity(ctx context.Context, in *RequestDel, opts ...grpc.CallOption) (*ResponseBroker, error)
	GetNumberRebelds(ctx context.Context, in *RequestLeia, opts ...grpc.CallOption) (*ResponseRebelds, error)
}

type brokerServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServicesClient(cc grpc.ClientConnInterface) BrokerServicesClient {
	return &brokerServicesClient{cc}
}

func (c *brokerServicesClient) AddCity(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error) {
	out := new(ResponseBroker)
	err := c.cc.Invoke(ctx, "/grpc.BrokerServices/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServicesClient) UpdateName(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error) {
	out := new(ResponseBroker)
	err := c.cc.Invoke(ctx, "/grpc.BrokerServices/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServicesClient) UpdateNumber(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseBroker, error) {
	out := new(ResponseBroker)
	err := c.cc.Invoke(ctx, "/grpc.BrokerServices/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServicesClient) DeleteCity(ctx context.Context, in *RequestDel, opts ...grpc.CallOption) (*ResponseBroker, error) {
	out := new(ResponseBroker)
	err := c.cc.Invoke(ctx, "/grpc.BrokerServices/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServicesClient) GetNumberRebelds(ctx context.Context, in *RequestLeia, opts ...grpc.CallOption) (*ResponseRebelds, error) {
	out := new(ResponseRebelds)
	err := c.cc.Invoke(ctx, "/grpc.BrokerServices/GetNumberRebelds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServicesServer is the server API for BrokerServices service.
// All implementations must embed UnimplementedBrokerServicesServer
// for forward compatibility
type BrokerServicesServer interface {
	AddCity(context.Context, *RequestInf) (*ResponseBroker, error)
	UpdateName(context.Context, *RequestInf) (*ResponseBroker, error)
	UpdateNumber(context.Context, *RequestInf) (*ResponseBroker, error)
	DeleteCity(context.Context, *RequestDel) (*ResponseBroker, error)
	GetNumberRebelds(context.Context, *RequestLeia) (*ResponseRebelds, error)
	mustEmbedUnimplementedBrokerServicesServer()
}

// UnimplementedBrokerServicesServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServicesServer struct {
}

func (UnimplementedBrokerServicesServer) AddCity(context.Context, *RequestInf) (*ResponseBroker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedBrokerServicesServer) UpdateName(context.Context, *RequestInf) (*ResponseBroker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedBrokerServicesServer) UpdateNumber(context.Context, *RequestInf) (*ResponseBroker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedBrokerServicesServer) DeleteCity(context.Context, *RequestDel) (*ResponseBroker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedBrokerServicesServer) GetNumberRebelds(context.Context, *RequestLeia) (*ResponseRebelds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberRebelds not implemented")
}
func (UnimplementedBrokerServicesServer) mustEmbedUnimplementedBrokerServicesServer() {}

// UnsafeBrokerServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServicesServer will
// result in compilation errors.
type UnsafeBrokerServicesServer interface {
	mustEmbedUnimplementedBrokerServicesServer()
}

func RegisterBrokerServicesServer(s grpc.ServiceRegistrar, srv BrokerServicesServer) {
	s.RegisterService(&BrokerServices_ServiceDesc, srv)
}

func _BrokerServices_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServicesServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerServices/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServicesServer).AddCity(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServices_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServicesServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerServices/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServicesServer).UpdateName(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServices_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServicesServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerServices/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServicesServer).UpdateNumber(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServices_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServicesServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerServices/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServicesServer).DeleteCity(ctx, req.(*RequestDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerServices_GetNumberRebelds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLeia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServicesServer).GetNumberRebelds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BrokerServices/GetNumberRebelds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServicesServer).GetNumberRebelds(ctx, req.(*RequestLeia))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerServices_ServiceDesc is the grpc.ServiceDesc for BrokerServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.BrokerServices",
	HandlerType: (*BrokerServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCity",
			Handler:    _BrokerServices_AddCity_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _BrokerServices_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _BrokerServices_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _BrokerServices_DeleteCity_Handler,
		},
		{
			MethodName: "GetNumberRebelds",
			Handler:    _BrokerServices_GetNumberRebelds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}

// FulcramServicesClient is the client API for FulcramServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcramServicesClient interface {
	AddCity(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error)
	UpdateName(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error)
	UpdateNumber(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error)
	DeleteCity(ctx context.Context, in *RequestDel, opts ...grpc.CallOption) (*ResponseFulcrum, error)
}

type fulcramServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcramServicesClient(cc grpc.ClientConnInterface) FulcramServicesClient {
	return &fulcramServicesClient{cc}
}

func (c *fulcramServicesClient) AddCity(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error) {
	out := new(ResponseFulcrum)
	err := c.cc.Invoke(ctx, "/grpc.FulcramServices/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcramServicesClient) UpdateName(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error) {
	out := new(ResponseFulcrum)
	err := c.cc.Invoke(ctx, "/grpc.FulcramServices/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcramServicesClient) UpdateNumber(ctx context.Context, in *RequestInf, opts ...grpc.CallOption) (*ResponseFulcrum, error) {
	out := new(ResponseFulcrum)
	err := c.cc.Invoke(ctx, "/grpc.FulcramServices/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcramServicesClient) DeleteCity(ctx context.Context, in *RequestDel, opts ...grpc.CallOption) (*ResponseFulcrum, error) {
	out := new(ResponseFulcrum)
	err := c.cc.Invoke(ctx, "/grpc.FulcramServices/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcramServicesServer is the server API for FulcramServices service.
// All implementations must embed UnimplementedFulcramServicesServer
// for forward compatibility
type FulcramServicesServer interface {
	AddCity(context.Context, *RequestInf) (*ResponseFulcrum, error)
	UpdateName(context.Context, *RequestInf) (*ResponseFulcrum, error)
	UpdateNumber(context.Context, *RequestInf) (*ResponseFulcrum, error)
	DeleteCity(context.Context, *RequestDel) (*ResponseFulcrum, error)
	mustEmbedUnimplementedFulcramServicesServer()
}

// UnimplementedFulcramServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFulcramServicesServer struct {
}

func (UnimplementedFulcramServicesServer) AddCity(context.Context, *RequestInf) (*ResponseFulcrum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedFulcramServicesServer) UpdateName(context.Context, *RequestInf) (*ResponseFulcrum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedFulcramServicesServer) UpdateNumber(context.Context, *RequestInf) (*ResponseFulcrum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedFulcramServicesServer) DeleteCity(context.Context, *RequestDel) (*ResponseFulcrum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedFulcramServicesServer) mustEmbedUnimplementedFulcramServicesServer() {}

// UnsafeFulcramServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcramServicesServer will
// result in compilation errors.
type UnsafeFulcramServicesServer interface {
	mustEmbedUnimplementedFulcramServicesServer()
}

func RegisterFulcramServicesServer(s grpc.ServiceRegistrar, srv FulcramServicesServer) {
	s.RegisterService(&FulcramServices_ServiceDesc, srv)
}

func _FulcramServices_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcramServicesServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcramServices/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcramServicesServer).AddCity(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulcramServices_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcramServicesServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcramServices/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcramServicesServer).UpdateName(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulcramServices_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcramServicesServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcramServices/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcramServicesServer).UpdateNumber(ctx, req.(*RequestInf))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulcramServices_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcramServicesServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FulcramServices/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcramServicesServer).DeleteCity(ctx, req.(*RequestDel))
	}
	return interceptor(ctx, in, info, handler)
}

// FulcramServices_ServiceDesc is the grpc.ServiceDesc for FulcramServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FulcramServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FulcramServices",
	HandlerType: (*FulcramServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCity",
			Handler:    _FulcramServices_AddCity_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _FulcramServices_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _FulcramServices_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _FulcramServices_DeleteCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
